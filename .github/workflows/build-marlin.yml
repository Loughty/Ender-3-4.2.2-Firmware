name: Build and Commit Marlin

on:
  workflow_dispatch: # Permite ejecutar el flujo manualmente desde la pestaña Actions

jobs:
  build-and-commit:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Clonar el repositorio actual
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Paso 2: Configurar el entorno
    - name: Setup Build Environment
      run: |
        sudo apt update
        sudo apt install -y python3 python3-pip gcc-avr avr-libc

    # Paso 3: Clonar la última versión estable de Marlin
    - name: Clone Marlin Source
      run: |
        git clone --branch bugfix-2.1.x --depth 1 https://github.com/MarlinFirmware/Marlin.git marlin-source

    # Paso 4: Compilar Marlin
    - name: Build Marlin
      working-directory: ./marlin-source
      run: |
        # Copiar configuración de ejemplo (puedes personalizar esto según tu impresora)
        cp ./Marlin/example_configurations/Creality/Ender-3/Configuration.h ./Marlin/
        cp ./Marlin/example_configurations/Creality/Ender-3/Configuration_adv.h ./Marlin/
        
        # Compilar
        ./build_marlin.sh

    # Paso 5: Mover los binarios generados al repositorio
    - name: Move Build Output
      run: |
        mkdir -p ./Marlin-Build-Outputs
        cp -r ./marlin-source/build/* ./Marlin-Build-Outputs/

    # Paso 6: Configurar Git para hacer commit
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    # Paso 7: Hacer commit de los archivos generados
    - name: Commit Build Outputs
      run: |
        git add ./Marlin-Build-Outputs
        git commit -m "Add latest Marlin build outputs [skip ci]"
        git push
